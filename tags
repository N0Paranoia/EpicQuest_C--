!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
AGRO_RANGE	.\Constants.h	/^const int AGRO_RANGE = 2 * TILE_SIZE;$/;"	v
AI_H	.\Ai.h	2;"	d
Agro	.\Ai.cpp	/^void Ai::Agro(Mobs* mobs[], int i, Tile* tiles[], SDL_Rect* playerRect, int type)$/;"	f	class:Ai
Ai	.\Ai.cpp	/^Ai::Ai()$/;"	f	class:Ai
Ai	.\Ai.h	/^class Ai$/;"	c
Attack	.\Player.cpp	/^void Player::Attack()$/;"	f	class:Player
Block	.\Player.cpp	/^void Player::Block()$/;"	f	class:Player
CAMERA_H	.\Camera.h	2;"	d
CAPtimer	.\EQ.cpp	/^Timer CAPtimer;$/;"	v
COLLISION_H	.\Collision.h	2;"	d
CONSTANTS_H_INCLUDED	.\Constants.h	2;"	d
Camera	.\Camera.cpp	/^Camera::Camera()$/;"	f	class:Camera
Camera	.\Camera.h	/^class Camera$/;"	c
Center	.\Camera.cpp	/^void Camera::Center(SDL_Rect* playerRect)$/;"	f	class:Camera
Check	.\Collision.cpp	/^bool Collision::Check(SDL_Rect a, SDL_Rect b)$/;"	f	class:Collision
CheckCloud	.\Collision.cpp	/^bool Collision::CheckCloud(SDL_Rect a, SDL_Rect b)$/;"	f	class:Collision
Check_Slope_45_Left	.\Collision.cpp	/^bool Collision::Check_Slope_45_Left(SDL_Rect a, SDL_Rect b)$/;"	f	class:Collision
Check_Slope_45_Right	.\Collision.cpp	/^bool Collision::Check_Slope_45_Right(SDL_Rect a, SDL_Rect b)$/;"	f	class:Collision
Cleanup	.\EQ.cpp	/^void EQ::Cleanup()$/;"	f	class:EQ
Cleanup	.\Player.cpp	/^void Player::Cleanup()$/;"	f	class:Player
Climb	.\Player.cpp	/^void Player::Climb(int Movement, Tile* tiles[])$/;"	f	class:Player
Cloud	.\Collision.cpp	/^bool Collision::Cloud(SDL_Rect cBox, Tile* tiles[])$/;"	f	class:Collision
Collision	.\Collision.cpp	/^Collision::Collision()$/;"	f	class:Collision
Collision	.\Collision.h	/^class Collision$/;"	c
Connection	.\Doors.cpp	/^void Doors::Connection(SDL_Rect* player, int z)$/;"	f	class:Doors
DOORS_H	.\Doors.h	2;"	d
Debug	.\Ai.cpp	/^void Ai::Debug()$/;"	f	class:Ai
Debug	.\EQ.cpp	/^void EQ::Debug()$/;"	f	class:EQ
DebugTexture	.\EQ.cpp	/^Textures DebugTexture;$/;"	v
Doors	.\Doors.cpp	/^Doors::Doors()$/;"	f	class:Doors
Doors	.\Doors.h	/^class Doors$/;"	c
EQ	.\EQ.cpp	/^EQ::EQ()$/;"	f	class:EQ
EQ	.\EQ.h	/^class EQ$/;"	c
EQ_H	.\EQ.h	2;"	d
EndFrameLeft	.\Player.h	/^		int EndFrameLeft;$/;"	m	class:Player
EndFrameRight	.\Player.h	/^		int EndFrameRight;$/;"	m	class:Player
Energy	.\Player.cpp	/^int Player::Energy(int action)$/;"	f	class:Player
Event	.\EQ.cpp	/^void EQ::Event(SDL_Event* event)$/;"	f	class:EQ
Execute	.\EQ.cpp	/^int EQ::Execute()$/;"	f	class:EQ
FPS	.\Constants.h	/^const int FPS = 60;$/;"	v
FPStimer	.\EQ.cpp	/^Timer FPStimer;$/;"	v
FacingLeft	.\Player.h	/^		bool FacingLeft;$/;"	m	class:Player
FacingRight	.\Player.h	/^		bool FacingRight;$/;"	m	class:Player
Fall	.\Ai.cpp	/^int Ai::Fall(Mobs* mobs[], int i, Tile* tiles[])$/;"	f	class:Ai
Falling	.\Ai.h	/^        bool Falling[TOTAL_TILES];$/;"	m	class:Ai
Falling	.\Player.cpp	/^void Player::Falling(Tile* tiles[])$/;"	f	class:Player
Follow	.\Camera.cpp	/^void Camera::Follow()$/;"	f	class:Camera
Font	.\EQ.h	/^      TTF_Font* Font;$/;"	m	class:EQ
Fps	.\EQ.cpp	/^void EQ::Fps()$/;"	f	class:EQ
FpsCap	.\EQ.cpp	/^void EQ::FpsCap()$/;"	f	class:EQ
Free	.\Textures.cpp	/^void Textures::Free()$/;"	f	class:Textures
GRAVITY	.\Constants.h	/^const int GRAVITY = 12;$/;"	v
GoTroughDoor	.\Player.cpp	/^void Player::GoTroughDoor(Tile* tiles[])$/;"	f	class:Player
Gravity	.\Physics.cpp	/^bool Physics::Gravity(SDL_Rect a, Tile* tiles[])$/;"	f	class:Physics
Health	.\Player.cpp	/^int Player::Health()$/;"	f	class:Player
HealthBar	.\Player.h	/^		SDL_Rect HealthBar;$/;"	m	class:Player
IdleFrameLeft	.\Player.h	/^		int IdleFrameLeft;$/;"	m	class:Player
IdleFrameRight	.\Player.h	/^		int IdleFrameRight;$/;"	m	class:Player
Init	.\EQ.cpp	/^bool EQ::Init()$/;"	f	class:EQ
Input	.\Ai.cpp	/^int Ai::Input(int i)$/;"	f	class:Ai
Input	.\EQ.cpp	/^void EQ::Input()$/;"	f	class:EQ
Input	.\Player.cpp	/^void Player::Input(Tile* tiles[])$/;"	f	class:Player
Jump	.\Player.cpp	/^void Player::Jump(Tile* tiles[])$/;"	f	class:Player
LEVEL_HEIGHT	.\Constants.h	/^const int LEVEL_HEIGHT = 30;$/;"	v
LEVEL_WIDTH	.\Constants.h	/^const int LEVEL_WIDTH = 30;$/;"	v
LoadFromFile	.\Textures.cpp	/^bool Textures::LoadFromFile(SDL_Renderer* Renderer, std::string path)$/;"	f	class:Textures
LoadFromRenderedText	.\Textures.cpp	/^bool Textures::LoadFromRenderedText(SDL_Renderer* Renderer, TTF_Font* Font, std::string textureText, SDL_Color textColor)$/;"	f	class:Textures
LoadMedia	.\EQ.cpp	/^bool EQ::LoadMedia()$/;"	f	class:EQ
LoadMedia	.\Player.cpp	/^int Player::LoadMedia(SDL_Renderer* Renderer)$/;"	f	class:Player
LoadMedia	.\World.cpp	/^int World::LoadMedia(SDL_Renderer* Renderer, Tile* tiles[], Mobs* mobs[])$/;"	f	class:World
Loop	.\EQ.cpp	/^void EQ::Loop()$/;"	f	class:EQ
MOBS_H	.\Mobs.h	2;"	d
MOB_CLEAR	.\Constants.h	/^const int MOB_CLEAR = 0;$/;"	v
MOB_TYPE_1	.\Constants.h	/^const int MOB_TYPE_1 = 1;$/;"	v
MOB_TYPE_2	.\Constants.h	/^const int MOB_TYPE_2 = 2;$/;"	v
MobBox	.\Mobs.h	/^ 		SDL_Rect MobBox;$/;"	m	class:Mobs
MobClips	.\World.h	/^        SDL_Rect MobClips[TOTAL_MOB_SPRITES];$/;"	m	class:World
MobSheetTexture	.\World.cpp	/^Textures MobSheetTexture;$/;"	v
MobType	.\Mobs.h	/^ 		int MobType;$/;"	m	class:Mobs
Mobs	.\Mobs.cpp	/^Mobs::Mobs(int x, int y, int Type)$/;"	f	class:Mobs
Mobs	.\Mobs.h	/^class Mobs$/;"	c
Move	.\Ai.cpp	/^int Ai::Move(Mobs* mobs[], int i, Tile* tiles[], SDL_Rect* playerRect, int type)$/;"	f	class:Ai
Move	.\Player.cpp	/^void Player::Move(int Movement, Tile* tiles[])$/;"	f	class:Player
Movement	.\Ai.h	/^        enum Movement$/;"	g	class:Ai
Movement	.\Player.h	/^		enum Movement$/;"	g	class:Player
PHYSICS_H	.\Physics.h	2;"	d
PLAYER_H	.\Player.h	2;"	d
Pause	.\Timer.cpp	/^void Timer::Pause()$/;"	f	class:Timer
PauseTicks	.\Timer.h	/^        Uint32 PauseTicks;$/;"	m	class:Timer
Paused	.\Timer.h	/^        bool Paused;$/;"	m	class:Timer
PhCollision	.\Physics.cpp	/^Collision PhCollision;$/;"	v
Physics	.\Physics.cpp	/^Physics::Physics()$/;"	f	class:Physics
Physics	.\Physics.h	/^class Physics$/;"	c
Player	.\Player.cpp	/^Player::Player()$/;"	f	class:Player
Player	.\Player.h	/^class Player$/;"	c
PlayerClips	.\Player.h	/^		SDL_Rect PlayerClips[18];$/;"	m	class:Player
Render	.\Camera.cpp	/^void Camera::Render(SDL_Renderer* Renderer)$/;"	f	class:Camera
Render	.\EQ.cpp	/^void EQ::Render()$/;"	f	class:EQ
Render	.\Mobs.cpp	/^void Mobs::Render(Textures* textures, SDL_Rect* clips, SDL_Renderer* Renderer, SDL_Rect* camera)$/;"	f	class:Mobs
Render	.\Player.cpp	/^void Player::Render(SDL_Renderer* Renderer, SDL_Rect* camera)$/;"	f	class:Player
Render	.\Textures.cpp	/^void Textures::Render(SDL_Renderer* Renderer,int x ,int y, SDL_Rect* clip)$/;"	f	class:Textures
Render	.\Tile.cpp	/^void Tile::Render(Textures* textures, SDL_Rect* clips, SDL_Renderer* Renderer, SDL_Rect* camera)$/;"	f	class:Tile
Render	.\World.cpp	/^void World::Render(SDL_Renderer* Renderer, SDL_Rect* camera, Tile* tiles[], Mobs* mobs[])$/;"	f	class:World
Renderer	.\EQ.h	/^      SDL_Renderer* Renderer;$/;"	m	class:EQ
Running	.\EQ.h	/^      bool Running;$/;"	m	class:EQ
SetMobs	.\World.cpp	/^bool World::SetMobs(Mobs* mobs[])$/;"	f	class:World
SetTiles	.\World.cpp	/^bool World::SetTiles(Tile* tiles[], Mobs* mobs[])$/;"	f	class:World
Shield	.\Player.h	/^		SDL_Rect Shield;$/;"	m	class:Player
ShieldBox	.\Player.h	/^		SDL_Rect ShieldBox;$/;"	m	class:Player
Slope_45_Left	.\Collision.cpp	/^bool Collision::Slope_45_Left(SDL_Rect cBox, Tile* tiles[])$/;"	f	class:Collision
Slope_45_Right	.\Collision.cpp	/^bool Collision::Slope_45_Right(SDL_Rect cBox, Tile* tiles[])$/;"	f	class:Collision
SpriteSheetTexture	.\Player.cpp	/^Textures SpriteSheetTexture;$/;"	v
StaminBar	.\Player.h	/^		SDL_Rect StaminBar;$/;"	m	class:Player
Start	.\Timer.cpp	/^void Timer::Start()$/;"	f	class:Timer
StartFrameLeft	.\Player.h	/^		int StartFrameLeft;$/;"	m	class:Player
StartFrameRight	.\Player.h	/^		int StartFrameRight;$/;"	m	class:Player
StartTicks	.\Timer.h	/^        Uint32 StartTicks;$/;"	m	class:Timer
Started	.\Timer.h	/^        bool Started;$/;"	m	class:Timer
State	.\Player.h	/^		enum State$/;"	g	class:Player
Stick	.\Collision.cpp	/^bool Collision::Stick(SDL_Rect cBox, Tile* tiles[])$/;"	f	class:Collision
StickToFloor	.\Physics.cpp	/^int Physics::StickToFloor(SDL_Rect a, SDL_Rect b, Tile* tiles[])$/;"	f	class:Physics
Stop	.\Timer.cpp	/^void Timer::Stop()$/;"	f	class:Timer
Sword	.\Player.h	/^		SDL_Rect Sword;$/;"	m	class:Player
SwordBox	.\Player.h	/^		SDL_Rect SwordBox;$/;"	m	class:Player
TEXTURES_H	.\Textures.h	2;"	d
TICK_PER_FRAME	.\Constants.h	/^const int TICK_PER_FRAME = 1000 \/ FPS;$/;"	v
TILE_CLEAR	.\Constants.h	/^const int TILE_CLEAR = 0;$/;"	v
TILE_DOOR	.\Constants.h	/^const int TILE_DOOR = 4;$/;"	v
TILE_GRASS	.\Constants.h	/^const int TILE_GRASS = 6;$/;"	v
TILE_H	.\Tile.h	2;"	d
TILE_LADDER	.\Constants.h	/^const int TILE_LADDER = 11;$/;"	v
TILE_LADDER_TOP	.\Constants.h	/^const int TILE_LADDER_TOP = 12;$/;"	v
TILE_LAVA	.\Constants.h	/^const int TILE_LAVA = 5;$/;"	v
TILE_PLATFORM	.\Constants.h	/^const int TILE_PLATFORM = 10;$/;"	v
TILE_SIZE	.\Constants.h	/^const int TILE_SIZE = 48;$/;"	v
TILE_SKY	.\Constants.h	/^const int TILE_SKY = 1;$/;"	v
TILE_SLOPE_LEFT	.\Constants.h	/^const int TILE_SLOPE_LEFT = 14;$/;"	v
TILE_SLOPE_RIGHT	.\Constants.h	/^const int TILE_SLOPE_RIGHT = 13;$/;"	v
TILE_TYPE_START	.\Constants.h	/^const int TILE_TYPE_START = 0;$/;"	v
TILE_WALL	.\Constants.h	/^const int TILE_WALL = 2;$/;"	v
TILE_WATER	.\Constants.h	/^const int TILE_WATER = 7;$/;"	v
TILE_WOOD	.\Constants.h	/^const int TILE_WOOD = 3;$/;"	v
TIMER_H	.\Timer.h	2;"	d
TOTAL_DOORS	.\Constants.h	/^const int TOTAL_DOORS = 2;$/;"	v
TOTAL_MOBS	.\Constants.h	/^const int TOTAL_MOBS = 3;$/;"	v
TOTAL_MOB_SPRITES	.\Constants.h	/^const int TOTAL_MOB_SPRITES = 2;$/;"	v
TOTAL_TILES	.\Constants.h	/^const int TOTAL_TILES = 900;$/;"	v
TOTAL_TILE_SPRITES	.\Constants.h	/^const int TOTAL_TILE_SPRITES = 15;$/;"	v
TextTexture	.\EQ.cpp	/^Textures TextTexture;$/;"	v
Texture	.\EQ.h	/^      SDL_Texture* Texture;$/;"	m	class:EQ
Textures	.\Textures.cpp	/^Textures::Textures()$/;"	f	class:Textures
Textures	.\Textures.h	/^class Textures$/;"	c
Tile	.\Tile.cpp	/^Tile::Tile(int x, int y, int Type)$/;"	f	class:Tile
Tile	.\Tile.h	/^class Tile$/;"	c
TileBox	.\Tile.h	/^        SDL_Rect TileBox;$/;"	m	class:Tile
TileClips	.\World.h	/^        SDL_Rect TileClips[TOTAL_TILE_SPRITES];$/;"	m	class:World
TileSheetTexture	.\World.cpp	/^Textures TileSheetTexture;$/;"	v
TileType	.\Tile.h	/^        int TileType;$/;"	m	class:Tile
Timer	.\Timer.cpp	/^Timer::Timer()$/;"	f	class:Timer
Timer	.\Timer.h	/^class Timer$/;"	c
Type_Mobs	.\World.h	/^        int Type_Mobs;$/;"	m	class:World
Type_Tiles	.\World.h	/^        int Type_Tiles;$/;"	m	class:World
Unpause	.\Timer.cpp	/^void Timer::Unpause()$/;"	f	class:Timer
Update	.\Ai.cpp	/^int Ai::Update(Mobs* mobs[], int i, Tile* tiles[], SDL_Rect* playerRect, int type, int axis)$/;"	f	class:Ai
Update	.\Player.cpp	/^void Player::Update()$/;"	f	class:Player
UpdateMobs	.\World.cpp	/^void  World::UpdateMobs(Mobs* mobs[], Tile* tiles[], SDL_Rect* playerRect)$/;"	f	class:World
Var	.\Collision.cpp	/^bool Collision::Var(SDL_Rect cBox, Tile* tiles[], int type)$/;"	f	class:Collision
WINDOW_HEIGHT	.\Constants.h	/^const int WINDOW_HEIGHT = 576;$/;"	v
WINDOW_WIDTH	.\Constants.h	/^const int WINDOW_WIDTH = 1024;$/;"	v
WORLD_H	.\World.h	2;"	d
WalkingLeft	.\Player.h	/^		bool WalkingLeft;$/;"	m	class:Player
WalkingRight	.\Player.h	/^		bool WalkingRight;$/;"	m	class:Player
Wall	.\Collision.cpp	/^bool Collision::Wall(SDL_Rect cBox, Tile* tiles[])$/;"	f	class:Collision
Window	.\EQ.h	/^      SDL_Window* Window ;$/;"	m	class:EQ
World	.\World.cpp	/^World::World()$/;"	f	class:World
World	.\World.h	/^class World$/;"	c
Xvel	.\Ai.h	/^        int Xvel[TOTAL_TILES];$/;"	m	class:Ai
Xvel	.\Player.h	/^		int Xvel, Yvel;$/;"	m	class:Player
Yvel	.\Ai.h	/^        int Yvel[TOTAL_TILES];$/;"	m	class:Ai
Yvel	.\Player.h	/^		int Xvel, Yvel;$/;"	m	class:Player
_state	.\Player.h	/^		int _state;$/;"	m	class:Player
ai	.\EQ.cpp	/^Ai ai;$/;"	v
aiCollision	.\Ai.cpp	/^Collision aiCollision;$/;"	v
attack	.\Player.h	/^		bool attack;$/;"	m	class:Player
attackEnergy	.\Player.h	/^		int attackEnergy;$/;"	m	class:Player
avgFPS	.\EQ.h	/^      float avgFPS;$/;"	m	class:EQ
block	.\Player.h	/^		bool block;$/;"	m	class:Player
blockEnergy	.\Player.h	/^		int blockEnergy;$/;"	m	class:Player
bottomA	.\Collision.h	/^        int bottomA, bottomB;$/;"	m	class:Collision
bottomB	.\Collision.h	/^        int bottomA, bottomB;$/;"	m	class:Collision
bottomCollisionBox	.\Player.h	/^		SDL_Rect bottomCollisionBox;$/;"	m	class:Player
camera	.\EQ.cpp	/^Camera camera;$/;"	v
cameraRect	.\Camera.h	/^        SDL_Rect cameraRect;$/;"	m	class:Camera
canEnterDoor	.\Player.h	/^		bool canEnterDoor;$/;"	m	class:Player
canJump	.\Player.h	/^		bool canJump;$/;"	m	class:Player
canRun	.\Player.h	/^		bool canRun;$/;"	m	class:Player
centerRect	.\Camera.h	/^        SDL_Rect centerRect;$/;"	m	class:Camera
climbingSpeed	.\Player.h	/^		int climbingSpeed;$/;"	m	class:Player
countedFrames	.\EQ.h	/^      int countedFrames;$/;"	m	class:EQ
debugText	.\EQ.h	/^std::stringstream debugText;$/;"	v
doorA	.\Doors.h	/^        SDL_Rect doorA[TOTAL_DOORS];$/;"	m	class:Doors
doorB	.\Doors.h	/^        SDL_Rect doorB[TOTAL_DOORS];$/;"	m	class:Doors
down	.\Player.h	/^			down,$/;"	e	enum:Player::Movement
energy	.\Player.h	/^		int energy;$/;"	m	class:Player
energyRecover	.\Player.h	/^		bool energyRecover;$/;"	m	class:Player
frame	.\Player.h	/^		int frame;$/;"	m	class:Player
frameCounter	.\Player.h	/^		int frameCounter;$/;"	m	class:Player
frameSpeed	.\Player.h	/^		int frameSpeed;$/;"	m	class:Player
frameSwitch	.\Player.h	/^		int frameSwitch;$/;"	m	class:Player
frameTicks	.\EQ.h	/^      int frameTicks;$/;"	m	class:EQ
getHeight	.\Textures.cpp	/^int Textures::getHeight()$/;"	f	class:Textures
getMobBox	.\Mobs.cpp	/^SDL_Rect Mobs::getMobBox()$/;"	f	class:Mobs
getTicks	.\Timer.cpp	/^Uint32 Timer::getTicks()$/;"	f	class:Timer
getTileBox	.\Tile.cpp	/^SDL_Rect Tile::getTileBox()$/;"	f	class:Tile
getType	.\Mobs.cpp	/^int Mobs::getType()$/;"	f	class:Mobs
getType	.\Tile.cpp	/^int Tile::getType()$/;"	f	class:Tile
getWidth	.\Textures.cpp	/^int Textures::getWidth()$/;"	f	class:Textures
health	.\Player.h	/^		int health;$/;"	m	class:Player
horizontal	.\Player.h	/^			horizontal,$/;"	e	enum:Player::Movement
idle	.\Ai.h	/^                idle,$/;"	e	enum:Ai::Movement
isAttacking	.\Player.h	/^		bool isAttacking;$/;"	m	class:Player
isBlocking	.\Player.h	/^		bool isBlocking;$/;"	m	class:Player
isClimbing	.\Player.h	/^		bool isClimbing;$/;"	m	class:Player
isDucking	.\Player.h	/^		bool isDucking;$/;"	m	class:Player
isFalling	.\Player.h	/^		bool isFalling;$/;"	m	class:Player
isJumping	.\Player.h	/^		bool isJumping;$/;"	m	class:Player
isPaused	.\Timer.cpp	/^bool Timer::isPaused()$/;"	f	class:Timer
isRunning	.\Player.h	/^		bool isRunning;$/;"	m	class:Player
isStarted	.\Timer.cpp	/^bool Timer::isStarted()$/;"	f	class:Timer
jump	.\Player.h	/^			jump$/;"	e	enum:Player::Movement
jumpCount	.\Player.h	/^		int jumpCount;$/;"	m	class:Player
jumpEnergy	.\Player.h	/^		int jumpEnergy;$/;"	m	class:Player
jumpHeight	.\Player.h	/^		int jumpHeight;$/;"	m	class:Player
jumpingSpeed	.\Player.h	/^		int jumpingSpeed;$/;"	m	class:Player
keyState	.\Player.h	/^		const Uint8* keyState;$/;"	m	class:Player
left	.\Ai.h	/^                left,$/;"	e	enum:Ai::Movement
left	.\Player.h	/^			left,$/;"	e	enum:Player::Movement
leftA	.\Collision.h	/^        int leftA, leftB;$/;"	m	class:Collision
leftB	.\Collision.h	/^        int leftA, leftB;$/;"	m	class:Collision
mCollision	.\Mobs.cpp	/^Collision mCollision;$/;"	v
mHeight	.\Textures.h	/^        int mHeight;$/;"	m	class:Textures
mWidth	.\Textures.h	/^        int mWidth;$/;"	m	class:Textures
main	.\EQ.cpp	/^int main(int argc, char* argv[])$/;"	f
maxEnergy	.\Player.h	/^		int maxEnergy;$/;"	m	class:Player
maxHealth	.\Player.h	/^		int maxHealth;$/;"	m	class:Player
mobs	.\EQ.cpp	/^Mobs* mobs[TOTAL_TILES];$/;"	v
movement	.\Ai.h	/^        Movement movement[TOTAL_TILES] = {};$/;"	m	class:Ai
pCollision	.\Player.cpp	/^Collision pCollision;$/;"	v
pDoors	.\Player.cpp	/^Doors pDoors;$/;"	v
pPhysics	.\Player.cpp	/^Physics pPhysics;$/;"	v
physics	.\EQ.cpp	/^Physics physics;$/;"	v
player	.\EQ.cpp	/^Player player;$/;"	v
playerBox	.\Player.h	/^		SDL_Rect playerBox;$/;"	m	class:Player
playerRect	.\Player.h	/^		SDL_Rect playerRect;$/;"	m	class:Player
right	.\Ai.h	/^                right,$/;"	e	enum:Ai::Movement
right	.\Player.h	/^			right,$/;"	e	enum:Player::Movement
rightA	.\Collision.h	/^        int rightA, rightB;$/;"	m	class:Collision
rightB	.\Collision.h	/^        int rightA, rightB;$/;"	m	class:Collision
runEnergy	.\Player.h	/^		int runEnergy;$/;"	m	class:Player
runningSpeed	.\Player.h	/^		int runningSpeed;$/;"	m	class:Player
state_attacking	.\Player.h	/^			state_attacking, \/\/4$/;"	e	enum:Player::State
state_blocking	.\Player.h	/^			state_blocking, \/\/ 5$/;"	e	enum:Player::State
state_climbing	.\Player.h	/^			state_climbing \/\/ 6$/;"	e	enum:Player::State
state_idle	.\Player.h	/^			state_idle, \/\/ 0$/;"	e	enum:Player::State
state_jumping	.\Player.h	/^			state_jumping, \/\/ 1$/;"	e	enum:Player::State
state_running	.\Player.h	/^			state_running, \/\/ 3$/;"	e	enum:Player::State
state_walking	.\Player.h	/^			state_walking, \/\/ 2$/;"	e	enum:Player::State
tCollision	.\Tile.cpp	/^Collision tCollision;$/;"	v
test	.\Camera.h	/^        SDL_Rect test;$/;"	m	class:Camera
textColor	.\EQ.h	/^      SDL_Color textColor;$/;"	m	class:EQ
texture	.\Textures.h	/^        SDL_Texture* texture;$/;"	m	class:Textures
tileSet	.\EQ.cpp	/^Tile* tileSet[TOTAL_TILES];$/;"	v
timeStep	.\EQ.h	/^      float timeStep;$/;"	m	class:EQ
topA	.\Collision.h	/^        int topA, topB;$/;"	m	class:Collision
topB	.\Collision.h	/^        int topA, topB;$/;"	m	class:Collision
up	.\Player.h	/^			up,$/;"	e	enum:Player::Movement
vertCenterCollisionBox	.\Player.h	/^		SDL_Rect vertCenterCollisionBox;$/;"	m	class:Player
vertical	.\Player.h	/^			vertical,$/;"	e	enum:Player::Movement
wAi	.\World.cpp	/^Ai wAi;$/;"	v
walkingSpeed	.\Player.h	/^		int walkingSpeed;$/;"	m	class:Player
wallpaperTexture	.\EQ.cpp	/^Textures wallpaperTexture;$/;"	v
world	.\EQ.cpp	/^World world;$/;"	v
~Ai	.\Ai.cpp	/^Ai::~Ai()$/;"	f	class:Ai
~Camera	.\Camera.cpp	/^Camera::~Camera()$/;"	f	class:Camera
~Collision	.\Collision.cpp	/^Collision::~Collision()$/;"	f	class:Collision
~Doors	.\Doors.cpp	/^Doors::~Doors()$/;"	f	class:Doors
~Physics	.\Physics.cpp	/^Physics::~Physics()$/;"	f	class:Physics
~Player	.\Player.cpp	/^Player::~Player()$/;"	f	class:Player
~Textures	.\Textures.cpp	/^Textures::~Textures()$/;"	f	class:Textures
~Tile	.\Tile.cpp	/^Tile::~Tile()$/;"	f	class:Tile
~Timer	.\Timer.cpp	/^Timer::~Timer()$/;"	f	class:Timer
~World	.\World.cpp	/^World::~World()$/;"	f	class:World
